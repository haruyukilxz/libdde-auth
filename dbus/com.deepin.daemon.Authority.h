/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c Authority -p com.deepin.daemon.Authority authority.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DAEMON_AUTHORITY_H
#define COM_DEEPIN_DAEMON_AUTHORITY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Authority
 */
class Authority: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Authority"; }

public:
    Authority(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Authority();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> CheckCookie(const QString &user, const QString &cookie)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user) << QVariant::fromValue(cookie);
        return asyncCallWithArgumentList(QStringLiteral("CheckCookie"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> Start(const QString &authType, const QString &user, const QDBusObjectPath &agentObj)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(authType) << QVariant::fromValue(user) << QVariant::fromValue(agentObj);
        return asyncCallWithArgumentList(QStringLiteral("Start"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::Authority Authority;
    }
  }
}
#endif
